AWSTemplateFormatVersion: '2010-09-09'
Description: CSYE 6225 IaC
Parameters:
  vpcName:
    Description: "VPC Name"
    Type: String
    Default: "myVPC"
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1CidrBlock:
    Description: "CIDR block for Subnet1"
    Type: String
    Default: "10.0.1.0/24"
  Subnet2CidrBlock:
    Description: "CIDR block for Subnet2"
    Type: String
    Default: "10.0.2.0/24"
  Subnet3CidrBlock:
    Description: "CIDR block for Subnet3"
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubnet1CidrBlock:
    Description: "CIDR block for Subnet3"
    Type: String
    Default: "10.0.1.1/24"
  PrivateSubnet2CidrBlock:
    Description: "CIDR block for Subnet3"
    Type: String
    Default: "10.0.1.2/24"
  PrivateSubnet3CidrBlock:
    Description: "CIDR block for Subnet3"
    Type: String
    Default: "10.0.1.3/24"
  AMI:
    Description: "AMI for Instance"
    Type: String
  KeyName:
    Description: "Key Name for Instance"
    Type: String
  environment:
    Description: "Environment"
    Type: String
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
  DomainName:
    Type: String
    Default : "demo.vaishnavisai.me"
  AccountId:
    Description: organization account id
    Type: String
    Default: 307362082106
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
  dynamoDBTable:
    Description: dynamoDBTableName
    Type: String
    Default: userVerification
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: 'false'
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: 'false'
  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: 'false'
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
  
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId: !Ref myInternetGateway

  myRouteTable:
    DependsOn: myVPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  privateRouteTable:
    DependsOn: myVPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  # privateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: myVPCGatewayAttachment
  #   Properties:
  #      RouteTableId:
  #        Ref: privateRouteTable
  #      GatewayId:
  #        Ref: myInternetGateway
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
       RouteTableId:
         Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway
  mySubnetARouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId: !Ref myRouteTable
  mySubnetARouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId: !Ref myRouteTable
  mySubnetARouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet3
      RouteTableId: !Ref myRouteTable
  myPrivateSubnetARouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet1
      RouteTableId: !Ref privateRouteTable
  myPrivateSubnetARouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet2
      RouteTableId: !Ref privateRouteTable
  myPrivateSubnetARouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet3
      RouteTableId: !Ref privateRouteTable
  
  application:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
      GroupDescription: Base Security Group
      # SecurityGroupIngress:
      #    - IpProtocol: tcp
      #      CidrIp: 0.0.0.0/0
      #      FromPort: 22
      #      ToPort: 22
      #    - IpProtocol: tcp
      #      CidrIp: 0.0.0.0/0
      #      FromPort: 80
      #      ToPort: 80
      #    - IpProtocol: tcp
      #      CidrIp: 0.0.0.0/0
      #      FromPort: 443
      #      ToPort: 443
      #    - IpProtocol: tcp
      #      CidrIp: 0.0.0.0/0
      #      FromPort: 8000
      #      ToPort: 8000
      VpcId: !Ref myVPC 
  applicationSecurityIngress1:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !GetAtt application.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt loadbalancer.GroupId
  applicationSecurityIngress2:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !GetAtt application.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt loadbalancer.GroupId
  database:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
      GroupDescription: Database Security Group
      VpcId: !Ref myVPC
  loadbalancer:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
      GroupDescription: loadbalancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 443
           ToPort: 443
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 80
           ToPort: 80
  SGBaseIngress:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        Fn::GetAtt:
        - application
        - GroupId
      GroupId:
        Fn::GetAtt:
        - database
        - GroupId
  S3Bucket:
   Type: 'AWS::S3::Bucket'
   Properties:
      AccessControl: Private
      BucketName: !Join ['.', [!Select [2, !Split [/, !Ref AWS::StackId ]],  !Ref environment, 'vaishnavi']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Prefix: standard_is
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

   DeletionPolicy: Delete

  RDSDBParameterGroup:
   Type: 'AWS::RDS::DBParameterGroup'
   Properties:
      Description: MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
  MyDBSubnetGroup:
   Type: AWS::RDS::DBSubnetGroup
   Properties:
      DBSubnetGroupDescription: Subnet group for Database
      SubnetIds:
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
  RDSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: webapp-key-1
        Statement:
        - Sid: Key for DB encryption
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":root"
          Action: kms:*
          Resource: "*"
      Tags:
      - Key: Name
        Value: RDS_encryption_key
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: csye6225
      DBInstanceIdentifier: csye6225
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '50'
      Engine: MySQL
      EngineVersion: 8.0.30
      MultiAZ: 'false'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: 'false'
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt database.GroupId
  # Ec2Instance: 
  #  Type: AWS::EC2::Instance
  #  Properties: 
  #   ImageId: !Ref AMI
  #   KeyName: !Ref KeyName
  #   InstanceType: "t2.micro"
  #   BlockDeviceMappings: 
  #     - DeviceName: "/dev/xvda"
  #       Ebs: 
  #         VolumeType: "gp2"
  #         DeleteOnTermination: "false"
  #         VolumeSize: "20"
    # NetworkInterfaces:
    #   - AssociatePublicIpAddress: "true"
    #     DeleteOnTermination: "true"
    #     SubnetId: !Ref mySubnet1
    #     DeviceIndex: "0"
    #     GroupSet:
    #      - !Ref application
    # IamInstanceProfile: !Ref RootInstanceProfile
    # UserData:
    #   Fn::Base64: 
        # !Sub |
        #   #!/bin/bash
        #   echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/profile
        #   echo export DB_USER=${DBUsername} >> /etc/profile
        #   echo export DB_PASSWORD=${DBPassword} >> /etc/profile
        #   echo export DB_NAME="csye6225" >> /etc/profile
        #   echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/profile
        #   echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/environment
        #   echo export DB_USER=${DBUsername} >> /etc/environment
        #   echo export DB_PASSWORD=${DBPassword} >> /etc/environment
        #   echo export DB_NAME="csye6225" >> /etc/environment
        #   echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/environment
        #   sudo su root
          # sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000
          # sudo pm2 restart all --update-env
          # sudo pm2 save
          # sudo systemctl daemon-reload
          # cd /home/ubuntu/webapp/
          # sudo systemctl restart node-service.service
  asgLaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - myRoute
    - MyDB
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref APPServerEncryptionKey
        ImageId: !Ref AMI
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt application.GroupId
            DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt
            - RootInstanceProfile
            - Arn
        UserData:
          Fn::Base64: 
            !Sub |
                  #!/bin/bash
                  echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/profile
                  echo export DB_USER=${DBUsername} >> /etc/profile
                  echo export DB_PASSWORD=${DBPassword} >> /etc/profile
                  echo export DB_NAME="csye6225" >> /etc/profile
                  echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/profile
                  echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/environment
                  echo export DB_USER=${DBUsername} >> /etc/environment
                  echo export DB_PASSWORD=${DBPassword} >> /etc/environment
                  echo export DB_NAME="csye6225" >> /etc/environment
                  echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/environment
                  echo export DOMAIN_NAME=demo.vaishnavisai.me >> /etc/environment
                  echo export SNS_TOPIC_NAME=${WebAPPSNS} >> /etc/environment
                  sudo su root
                  sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000
                  sudo pm2 restart all --update-env
                  sudo pm2 save
                  sudo systemctl daemon-reload 
                  cd /home/ubuntu/webapp/
                  sudo systemctl restart node-service.service
  asgLaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - myRoute
    - MyDB
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref APPServerEncryptionKey
        ImageId: !Ref AMI
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt application.GroupId
            DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt
            - RootInstanceProfile
            - Arn
        UserData:
          Fn::Base64: 
            !Sub |
                  #!/bin/bash
                  echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/profile
                  echo export DB_USER=${DBUsername} >> /etc/profile
                  echo export DB_PASSWORD=${DBPassword} >> /etc/profile
                  echo export DB_NAME="csye6225" >> /etc/profile
                  echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/profile
                  echo export DB_HOST=${MyDB.Endpoint.Address} >> /etc/environment
                  echo export DB_USER=${DBUsername} >> /etc/environment
                  echo export DB_PASSWORD=${DBPassword} >> /etc/environment
                  echo export DB_NAME="csye6225" >> /etc/environment
                  echo export S3_BUCKET_NAME=${S3Bucket} >> /etc/environment
                  echo export DOMAIN_NAME=demo.vaishnavisai.me >> /etc/environment
                  echo export SNS_TOPIC_NAME=${WebAPPSNS} >> /etc/environment
                  sudo su root
                  sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000
                  sudo pm2 restart all --update-env
                  sudo pm2 save
                  sudo systemctl daemon-reload 
                  cd /home/ubuntu/webapp/
                  sudo systemctl restart node-service.service
      
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Select [ 0, !GetAZs ]
        - !Select [ 1, !GetAZs ]
        - !Select [ 2, !GetAZs ]
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchConfig
        Version: !GetAtt asgLaunchConfig.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3

  asgScalingPolicyHigh: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "60"
      AutoScalingGroupName: !Ref asgWebApp
      ScalingAdjustment: 1

  asgScalingPolicyLow: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "60"
      AutoScalingGroupName: !Ref asgWebApp
      ScalingAdjustment: -1

  cloudAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale-up if CPU>5%"
      MetricName : CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      Threshold: 15
      EvaluationPeriods: 2
      AlarmActions:
        - !Ref asgScalingPolicyHigh
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold

  cloudAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale-up if CPU < 3%"
      MetricName : CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      Threshold: 10
      EvaluationPeriods: 2
      AlarmActions:
        - !Ref asgScalingPolicyLow
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold

  appLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: myVPCGatewayAttachment
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadbalancer
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  
  LoadBalancerAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z03670693TROUG4SWVG6L
      Comment : "Alias for loadbalancer"
      Name: !Join ['.', [!Ref environment, 'vaishnavisai','me.']]
      Type: A
      AliasTarget:
        DNSName: !GetAtt appLoadBalancer.DNSName
        HostedZoneId: !GetAtt appLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: false
  
  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/checkpoint'
      HealthCheckPort: '80'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 80
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC

  APPServerEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: webapp-key-2
        Statement:
        - Sid: App Server encryption key
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":root"
          Action: kms:*
          Resource: "*"
        - Sid: Allow service-linked role use of the KMS
          Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
          Action:
          - kms:CreateGrant
          Resource: "*"
          Condition:
            Bool:
              kms:GrantIsForAWSResource: true
      Tags:
      - Key: Name
        Value: webapp_encryption_key
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref appLoadBalancer
      Port: 80
      Protocol: HTTP

  # myIAMRole: 
  #   Type: "AWS::IAM::Role"
  #   Properties: 
  #     RoleName: "EC2-CSYE6225"
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Principal: 
  #             Service: 
  #               - "ec2.amazonaws.com"
  #           Action: 
  #             - "sts:AssumeRole"
  #     Path: "/"
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  #       - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
  # myIAMPolicy:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
      # PolicyName: WebAppS3
      # PolicyDocument:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Effect: Allow
      #       Action: 
      #         - s3:GetObject
      #         - s3:PutObject
      #         - s3:DeleteObject
      #         - s3:PutObjectAcl
      #         - s3:ListBucket
      #         - s3:ListMultipartUploadParts
      #         - s3:AbortMultipartUpload
      #         - ec2:RunInstances
      #         - ec2:AssociateIamInstanceProfile
      #         - ec2:ReplaceIamInstanceProfileAssociation
      #         - kms:Decrypt
      #         - kms:GenerateDataKey
      #         - s3:ListAllMyBuckets
      #       Resource: 
      #         - !Sub arn:aws:s3:::${S3Bucket}
      #         - !Sub arn:aws:s3:::${S3Bucket}/*
      # Roles:
      #   - !Ref myIAMRole  
      # ManagedPolicyArns:
      # - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      # - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy    
  # myIAMRolePolicy:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyName: RoleCreation
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action: 
  #             - ec2:RunInstances
  #             - ec2:AssociateIamInstanceProfile
  #             - ec2:ReplaceIamInstanceProfileAssociation
  myIAMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
      - PolicyName: snsPublishAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - Ref: WebAPPSNS
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  myIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:ListBucket
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - ec2:RunInstances
              - ec2:AssociateIamInstanceProfile
              - ec2:ReplaceIamInstanceProfileAssociation
              - kms:Decrypt
              - kms:GenerateDataKey
              - s3:ListAllMyBuckets
            Resource: 
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*
      Roles:
        - !Ref myIAMRole  
 
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref myIAMRole
  WebAppCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: csye6225
      RetentionInDays: 1
      # Tags:
      #   - Key: Environment
      #     Value: !Ref EnvironmentName
  WebAppCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: csye6225
      LogStreamName: webapp
    DependsOn:
    - WebAppCloudWatchLogGroup
  # myDNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId : Z03670693TROUG4SWVG6L
  #     Name: demo.vaishnavisai.me
  #     ResourceRecords:
  #     - !GetAtt Ec2Instance.PublicIp
  #     TTL: 60
  #     Type: A
  WebAPPSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: My First WebApp SNS
      Subscription:
      - Endpoint:
          Fn::GetAtt: 
          - EmailLambda
          - Arn
        Protocol: lambda
      TopicName: WebAppSNS
    DependsOn:
    - EmailLambda
  EmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: vaishnavi-lambda-handler
        S3Key: lambda.zip
      Description: Emails the TTL link to the user for account verification
      Environment:
        Variables:
          domainName: !Ref DomainName
      FunctionName: handler
      Handler: index.handler
      PackageType: Zip
      Role:
        Fn::GetAtt: EmailLambdaFunctionRole.Arn
      Runtime: nodejs16.x
    DependsOn: EmailLambdaFunctionRole
  EmailLambdaFunctionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "EC2-CS-lam"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

           
  # EmailLambdaFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: iam role for email lambda function
  #     ManagedPolicyArns:
  #     - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  EmailLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: handler
      Principal: sns.amazonaws.com
    DependsOn: 
    - EmailLambda
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: token
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      - AttributeName: token
        KeyType: RANGE
      TableName:
        Ref: dynamoDBTable
      # Tags:
      # - Key: Name
      #   Value:
      #     Ref: Name
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC
    SubnetId1:
      Description: The Subnet ID 1
      Value: !Ref mySubnet1
    SubnetId2:
      Description: The Subnet ID 2
      Value: !Ref mySubnet2
    SubnetId3:
      Description: The Subnet ID 3
      Value: !Ref mySubnet3
    InternetGateway:
      Description: Internet Gateway
      Value: !Ref myInternetGateway
    Route:
      Description: Route
      Value: !Ref myRoute
    RouteTable:
      Description: Route Table
      Value: !Ref myRouteTable